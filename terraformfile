pipeline {
    agent any

    environment {
        AWS_REGION = 'us-west-2'
        TF_DIR = './terraform'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/fallmarieme2000-dot/terraform.git'
            }
        }

        stage('Terraform Init') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', 
                     credentialsId: 'aws-key'],
                    string(credentialsId: 'aws-token', variable: 'AWS_SESSION_TOKEN')
                ]) {
                    dir("${TF_DIR}") {
                        sh 'terraform init -upgrade'
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', 
                     credentialsId: 'aws-key'],
                    string(credentialsId: 'aws-token', variable: 'AWS_SESSION_TOKEN')
                ]) {
                    dir("${TF_DIR}") {
                        sh 'terraform plan -out=tfplan'
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                input message: 'Souhaitez-vous appliquer le plan Terraform ?'
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', 
                     credentialsId: 'aws-key'],
                    string(credentialsId: 'aws-token', variable: 'AWS_SESSION_TOKEN')
                ]) {
                    dir("${TF_DIR}") {
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                dir("${TF_DIR}") {
                    sh 'terraform destroy -auto-approve'
                }
            }

    }

    post {
        always {
            echo '✅ Pipeline Terraform terminé.'
        }
        failure {
            echo '❌ Le pipeline a échoué.'
        }
    }
}
